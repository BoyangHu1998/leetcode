// naive dp
class Solution {
    public int maxProfit(int[] prices) {
        int[] dp = new int[prices.length]; // dp[i] is the max profit I can get ending with i-th day
        
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            if ((dp[i-1] + prices[i] - prices[i-1]) > 0) {
                dp[i] = dp[i-1] + prices[i] - prices[i-1];
                max = Math.max(max, dp[i]);
            } else {
                dp[i] = 0;
            }
        }
        return max;
    }
}

// because we only looks the max profit of the previous day
class Solution {
    public int maxProfit(int[] prices) {
        int prev = 0; // prev is the max profit I can get ending with previous day
        
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            if ((prev + prices[i] - prices[i-1]) > 0) {
                prev = prev + prices[i] - prices[i-1];
                max = Math.max(max, prev);
            } else {
                prev = 0;
            }
        }
        return max;
    }
}

// my tedious improvement
class Solution {
    public int maxProfit(int[] prices) {
        int prev = 0; // prev is the max profit I can get ending with previous day
        
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            prev = prev + prices[i] - prices[i-1];
            if (prev > max) {
                max = prev;
            } else if (prev < 0) {
                prev = 0;
            }
        }
        return max;
    }
}


// https://leetcode.com/problems/best-time-to-buy-and-sell-stock/discuss/1735493/JavaC%2B%2B-best-ever-EXPLANATION-could-possible
class Solution {
    // https://leetcode.com/problems/best-time-to-buy-and-sell-stock/discuss/1735493/JavaC%2B%2B-best-ever-EXPLANATION-could-possible
    public int maxProfit(int[] prices) {
        int lsf = Integer.MAX_VALUE; // least so far
        int opt = 0;
        
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < lsf) {
                lsf = prices[i];
            } else {
                int optEndDayI = prices[i] - lsf;
                if (opt < optEndDayI) {
                    opt = optEndDayI;
                }
            }
        }
        return opt;
    }
}
